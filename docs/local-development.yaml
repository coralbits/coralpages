# Local Development Guide

title: "Local Development"
template: "docs://_default"

data:
  - type: builtin://markdown
    data:
      title: "Development Environment Setup"
      text: |
        ## Prerequisites

        - Python 3.8 or higher
        - uv (recommended) or pip
        - Git

        ## Installation

        ```bash
        # Clone the repository
        git clone <repository-url>
        cd page_editor

        # Install dependencies using uv (recommended)
        uv sync

        # Or using pip
        pip install -r requirements.txt
        ```

        ## Running the Development Server

        ### Using the Development Script
        ```bash
        # Start the development server
        python serve.py
        ```

        ### Using the Run Script
        ```bash
        # Make the script executable
        chmod +x run.sh

        # Run the server
        ./run.sh
        ```

        ### Manual Server Start
        ```bash
        # Start the server manually
        python -m pe.server
        ```

        The server will start on `http://localhost:8000` by default.
    style:
      max-width: 1200px
      margin: 0 auto
      padding: 40px 20px
      line-height: 1.6
      color: #333
  - type: builtin://markdown
    data:
      title: "Working with Pages"
      text: |
        ## Creating Pages

        Pages are defined in YAML format. Create a new page by adding a YAML file to your pages directory:

        ```yaml
        # my-page.yaml
        data:
          - type: builtin://header
            data:
              text: "My New Page"
            style:
              background: blue
              color: white
              text-align: center
              padding: 20px
          
          - type: builtin://text
            data:
              text: "Welcome to my new page!"
            style:
              padding: 20px
              font-size: 18px
        ```

        ## Page Rendering

        ### Render a Single Page
        ```bash
        # Render a page to HTML
        python render.py my-page.yaml
        ```

        ### Render with Custom Output
        ```bash
        # Render to a specific output file
        python render.py my-page.yaml -o output.html
        ```

        ## Development Workflow

        1. **Create/Edit YAML files** in your pages directory
        2. **Test rendering** with `python render.py page.yaml`
        3. **View in browser** by opening the generated HTML
        4. **Iterate and refine** your page design
        5. **Use the editor** for visual editing (if available)
    style:
      max-width: 1200px
      margin: 0 auto
      padding: 40px 20px
      line-height: 1.6
      color: #333
      background: #f8f9fa
      border-radius: 8px
      margin-top: 20px
  - type: builtin://markdown
    data:
      title: "Directory Structure"
      text: |
        ## Project Layout

        ```
        page_editor/
        ├── pe/                    # Core application code
        │   ├── __init__.py
        │   ├── main.py           # Main application entry point
        │   ├── server.py         # HTTP server implementation
        │   ├── renderer.py       # Page rendering logic
        │   ├── config.py         # Configuration management
        │   ├── types.py          # Type definitions
        │   └── ...
        ├── templates/            # Component templates
        │   ├── header/
        │   ├── text/
        │   ├── image/
        │   └── ...
        ├── docs/                 # Documentation pages
        │   ├── index.yaml
        │   ├── getting-started.yaml
        │   └── ...
        ├── config.yaml           # Component configuration
        ├── serve.py              # Development server script
        ├── render.py             # Page rendering script
        └── requirements.txt      # Python dependencies
        ```

        ## Key Directories

        - **`pe/`**: Core application logic and API
        - **`templates/`**: HTML templates for each component
        - **`docs/`**: Documentation pages in YAML format
        - **`config.yaml`**: Component definitions and configuration
    style:
      max-width: 1200px
      margin: 0 auto
      padding: 40px 20px
      line-height: 1.6
      color: #333
      background: #f8f9fa
      border-radius: 8px
      margin-top: 20px
  - type: builtin://markdown
    data:
      title: "Development Tools"
      text: |
        ## Available Scripts

        ### Development Server
        ```bash
        python serve.py
        ```
        Starts the development server with hot reloading.

        ### Page Renderer
        ```bash
        python render.py <page.yaml>
        ```
        Renders a YAML page to HTML.

        ### Make Commands
        ```bash
        # Build the project
        make build

        # Run tests
        make test

        # Clean build artifacts
        make clean
        ```

        ## Debugging

        ### Enable Debug Mode
        ```bash
        # Set debug environment variable
        export DEBUG=1
        python serve.py
        ```

        ### Logging
        The application uses Python's logging module. Set the log level:
        ```bash
        export LOG_LEVEL=DEBUG
        python serve.py
        ```

        ### Common Issues

        **Port already in use:**
        ```bash
        # Kill process using port 8000
        lsof -ti:8000 | xargs kill -9
        ```

        **Permission denied:**
        ```bash
        # Make scripts executable
        chmod +x run.sh
        chmod +x render.py
        ```
    style:
      max-width: 1200px
      margin: 0 auto
      padding: 40px 20px
      line-height: 1.6
      color: #333
      background: #f8f9fa
      border-radius: 8px
      margin-top: 20px
  - type: builtin://markdown
    data:
      title: "Testing"
      text: |
        ## Running Tests

        ```bash
        # Run all tests
        python -m pytest pe/tests/

        # Run specific test file
        python -m pytest pe/tests/test_renderer.py

        # Run with verbose output
        python -m pytest -v pe/tests/
        ```

        ## Test Structure

        Tests are located in `pe/tests/` and follow standard pytest conventions:

        - `test_*.py`: Test files
        - `test_*()`: Test functions
        - `Test*`: Test classes

        ## Writing Tests

        ```python
        # Example test
        def test_renderer_basic():
            from pe.renderer import render_page
            from pe.types import PageData
            
            page_data = PageData(
                data=[
                    {
                        "type": "text",
                        "data": {"text": "Hello World"},
                        "style": {"color": "blue"}
                    }
                ]
            )
            
            result = render_page(page_data)
            assert "Hello World" in result
            assert "color: blue" in result
        ```
    style:
      max-width: 1200px
      margin: 0 auto
      padding: 40px 20px
      line-height: 1.6
      color: #333
      background: #f8f9fa
      border-radius: 8px
      margin-top: 20px
  - type: builtin://markdown
    data:
      title: "Configuration"
      text: |
        ## Environment Variables

        ```bash
        # Server configuration
        export PORT=8000                    # Server port (default: 8000)
        export HOST=0.0.0.0                 # Server host (default: 127.0.0.1)
        export DEBUG=1                      # Enable debug mode
        export LOG_LEVEL=INFO               # Logging level

        # Development settings
        export RELOAD=1                     # Enable auto-reload
        export TEMPLATE_CACHE=0             # Disable template caching
        ```

        ## Configuration File

        The `config.yaml` file defines available components:

        ```yaml
        elements:
          - name: text
            viewer: builtin://text/view.html
            css: builtin://text/style.css
            editor:
              - id: text
                type: rich-text
          # ... more components
        ```

        ## Custom Components

        To add custom components, edit `config.yaml`:

        ```yaml
        elements:
          - name: custom-component
            viewer: http://localhost:8080/api/custom-viewer
            css: http://localhost:8080/api/custom-css
            editor: http://localhost:8080/api/custom-editor
        ```
    style:
      max-width: 1200px
      margin: 0 auto
      padding: 40px 20px
      line-height: 1.6
      color: #333
      background: #f8f9fa
      border-radius: 8px
      margin-top: 20px
